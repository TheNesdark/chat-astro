---
import supabase from "@/libs/Supabase";
import Header from "@components/ChatHeader.astro";
import ChatContainer from "@components/ChatContainer.jsx";
import ChatSend from "@components/ChatSend.astro";
import "../styles/global.css";
import CamViewer from "@components/CamViewer.astro";
import { getCurrentUser, refreshSession } from "@/services/Auth";  // Agrega refreshSession

const accessToken = Astro.cookies.get("sb-access-token")?.value;
const refreshToken = Astro.cookies.get("sb-refresh-token")?.value;

if (!accessToken || !refreshToken) {
  return Astro.redirect("/Login");
}

let user = null;

try {
  // Valida access_token primero
  user = await getCurrentUser(accessToken);
  
  if (!user) {
    throw new Error("Token inválido");
  }
  
  console.log("Token válido, user cargado:", user.email);
} catch (validateError) {
  // Si error 401 (expirado) y hay refresh_token, refresca
  if (validateError.message.includes("401") && refreshToken) {
    console.log("Token expirado, refrescando server-side...");
    
    try {
      const refreshData = await refreshSession(refreshToken);
      
      if (!refreshData.session) {
        throw new Error("No se pudo refrescar");
      }

      // Actualiza cookies con nuevos tokens
      Astro.cookies.set("sb-access-token", refreshData.session.access_token, {
        httpOnly: true,
        secure: import.meta.env.PROD,
        sameSite: "strict",
        path: "/",
        maxAge: 60 * 60 * 24  // 24h
      });

      Astro.cookies.set("sb-refresh-token", refreshData.session.refresh_token, {
        httpOnly: true,
        secure: import.meta.env.PROD,
        sameSite: "strict",
        path: "/",
        maxAge: 60 * 60 * 24 * 7  // 7 días
      });

      // Obtén user del refresh
      user = refreshData.user || await getCurrentUser(refreshData.session.access_token);
      
      console.log("Sesión refrescada server-side:", user.email);
    } catch (refreshError) {
      console.error("Error refrescando:", refreshError);
      // Limpia cookies
      Astro.cookies.delete("sb-access-token", { path: "/" });
      Astro.cookies.delete("sb-refresh-token", { path: "/" });
      return Astro.redirect("/Login");
    }
  } else {
    // Otro error: limpia y redirige
    console.error("Error validando:", validateError);
    Astro.cookies.delete("sb-access-token", { path: "/" });
    Astro.cookies.delete("sb-refresh-token", { path: "/" });
    return Astro.redirect("/Login");
  }
}

// Si llega aquí, user es válido
if (!user) {
  return Astro.redirect("/Login");
}

const username = user.user_metadata.display_name || "U";
const firstLetter = username.charAt(0).toUpperCase();
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>Astro Basics</title>

  </head>
  <body >
  <Header firstLetter={firstLetter} />
  <ChatContainer
    client:load
    user={user}
  />
  <ChatSend />
  <CamViewer />
</body>
<script type="module" src="/src/main.js" defer></script>
</html>

<style>
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    display: flex;
    flex-direction: column;
    height: 100vh;
    background: #1e1e1e;
  }
</style>

